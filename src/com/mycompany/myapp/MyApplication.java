package com.mycompany.myapp;

import Entity.Randonnee;
import Entity.Profil;
import Entity.User;

import com.codename1.components.MultiButton;
import com.codename1.googlemaps.MapContainer;
import com.codename1.io.ConnectionRequest;
import com.codename1.io.JSONParser;
import com.codename1.io.NetworkEvent;
import com.codename1.ui.Display;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.io.NetworkManager;
import com.codename1.maps.Coord;
import com.codename1.maps.MapListener;
import com.codename1.ui.Button;
import com.codename1.ui.Command;
import com.codename1.ui.Component;
import com.codename1.ui.Container;
import com.codename1.ui.EncodedImage;
import com.codename1.ui.FontImage;
import com.codename1.ui.Image;
import com.codename1.ui.Label;
import com.codename1.ui.Tabs;
import com.codename1.ui.TextField;
import com.codename1.ui.Toolbar;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.events.ActionListener;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.ui.plaf.Style;
import com.codename1.ui.spinner.Picker;
import com.codename1.ui.util.UIBuilder;

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import  java.util.LinkedHashMap ;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename
 * One</a> for the purpose of building native mobile applications using Java.
 */
public class MyApplication {

    private Form current;
    private Resources theme;
    private Form F;
    private Form F2;
    // private Form F3;
    private Form F4;
    private Form F5;
    private Form F6;
    private Form F7;
    private Button B;
    private TextField T1;
    private TextField T2;
     private TextField T3;
      private TextField T4;
       private TextField T5;
        private TextField T6;
         private TextField T7;
         private Picker p ;
         
         private Button B2;
    
    private Tabs tb;

    List<Randonnee> Rando = new ArrayList<>();
     List<Randonnee> Rando1 = new ArrayList<>();
    
    Command cm1 = new Command("Randonnee");
    Command cm2 = new Command("Produit");
    Command cm3 = new Command("LogOut");
    Command cm4 = new Command("Profil");
    Command cm5 = new Command("<");
    Command cm6 = new Command("back");
     Command cm67 = new Command("<");

    public void init(Object context) {
        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature, uncomment if you have a pro subscription
        // Log.bindCrashProtection(true);
    }

    public void start() {
        if (current != null) {
            current.show();
            return;
        }
        UIBuilder UIB = new UIBuilder();
        
        // UIBuilder.registerCustomComponent(, class);
        Container c = UIB.createContainer(theme, "GUI1");
        Container c1 = UIB.createContainer(theme, "GUI12");
        Container c2 = UIB.createContainer(theme, "GUI1234");
        Container c3 = UIB.createContainer(theme, "GUI123");
        Container c4 = UIB.createContainer(theme, "GUI123");
        Container c5 = UIB.createContainer(theme, "GUI123");
        
       

        Form F = (Form) UIB.findByName("GUI1", c);
        Form F2 = (Form) UIB.findByName("GUI12", c1);
        Form F3 = new Form("", new BorderLayout());
        // Form F3 =(Form) UIB.findByName("GUI123", c2);
        Form F4 = (Form) UIB.findByName("GUI123", c3);
        Form F5 = (Form) UIB.findByName("GUI123", c4);
        Form F6 = (Form) UIB.findByName("GUI1234", c2);
         Form F7 = (Form) UIB.findByName("GUI123", c5);
        
        
        
        F5.setLayout(new BoxLayout(BoxLayout.Y_AXIS));
        
        Image i = theme.getImage("back_left_pressed.png");

        B = (Button) UIB.findByName("Button", F);
        // B2 = (Button) UIB.findByName("B2", F5);
        
        Tabs t = new Tabs();
        TextField T1 = (TextField) UIB.findByName("T1", c);
        TextField T2 = (TextField) UIB.findByName("T2", c);
        TextField T3 = (TextField) UIB.findByName("TADD", c2);
        TextField T4 = (TextField) UIB.findByName("TADD1", c2);
        TextField T5 = (TextField) UIB.findByName("TADD2", c2);
        TextField T6 = (TextField) UIB.findByName("TADD3", c2);
        TextField T7 = (TextField) UIB.findByName("TADD4", c2);
         Style s = UIManager.getInstance().getComponentSelectedStyle("Title");
        TextField searchField = new TextField("", "Filtrer"); 
       
//        Picker P = (Picker) UIB.findByName("Picker", c2);
                
        
        
        F2.getToolbar().addCommandToSideMenu(cm1);
        F2.getToolbar().addCommandToSideMenu(cm2);
        F2.getToolbar().addCommandToOverflowMenu(cm3);
        F2.getToolbar().addCommandToSideMenu(cm4);
        F3.getToolbar().addCommandToLeftBar(cm5);
        F3.getToolbar().addCommandToOverflowMenu(cm3);

        t.addTab("Events", c4);
        t.addTab("Creer", c2);
//        t.addTab("Update", c3);

        F3.add(BorderLayout.CENTER, t);
        cm5.setIcon(i);

        B.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                if (T1.getText().equals("user") && T2.getText().equals("user")) {

                    F2.show();

                } else {
                    Dialog.show("erreur", "verifier Login ou Password", "ok", "cancel");
                }

            }

        });

        F2.addCommandListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                if (evt.getCommand() == cm3) {
                    F.show();
                }
                if (evt.getCommand() == cm1) {
                    F3.show();

                }
            }
        });
        F3.addCommandListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                if (evt.getCommand() == cm5) {
                    F2.show();
                }
                if (evt.getCommand() == cm3) {
                    F.show();
                }
            }
        });

        B.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {

                ConnectionRequest connectionRequest;
                connectionRequest = new ConnectionRequest() {
                    @Override
                    protected void readResponse(InputStream input) throws IOException {
                        JSONParser json = new JSONParser();

                        Reader reader = new InputStreamReader(input, "UTF-8");
                        Map<String, Object> data = json.parseJSON(reader);
                        List<Map<String, Object>> content
                                = (List<Map<String, Object>>) data.get("root");
                        for (Map<String, Object> obj : content) {

                            String n = (String) obj.get("nom");
                            String d = (String) obj.get("description");
                            String dd = (String) obj.get("date_depart");
                            String ad = (String) obj.get("address_randonnee");
                            String lon = (String) obj.get("longitude");
                            String lat = (String) obj.get("latitude");
                            //String nbr = (String) obj.get("nbr_place");
                            Randonnee r = new Randonnee(n, d, dd, ad, 0);
                            r.setLatitude(Float.parseFloat(lat));
                            r.setLongitude(Float.parseFloat(lon));

                            Rando.add(r);

                        }

                    }

                    @Override
                    protected void postResponse() {

                        for (Randonnee R : Rando) {
                            MultiButton mb = new MultiButton("Nom :"+R.getNom());
                            mb.setTextLine2("Date De Depart :"+R.getDate_depart());
                            mb.setTextLine3("Description :"+R.getDescription());
                            mb.setTextLine4("Destination :"+R.getAddress_randonnee());
                            F5.add(mb);
                            mb.addActionListener(new ActionListener() {
                                @Override
                                public void actionPerformed(ActionEvent evt) {
                                    Form local = new Form();
                                    local.setLayout(new BorderLayout());
                                    local.setTitle("Localization");
                                    // Map

                                    MapContainer cnt = new MapContainer();
                                    Coord center = new Coord(R.getLatitude(), R.getLongitude());
                                    cnt.zoom(center, 15);

                                    try {
                                        cnt.setCameraPosition(new Coord(R.getLatitude(), R.getLongitude()));
                                        cnt.addMarker(EncodedImage.create("/maps-pin.png"), new Coord(R.getLatitude(), R.getLongitude()), "Hi marker", "Optional long description", new ActionListener() {
                                            @Override
                                            public void actionPerformed(ActionEvent evt) {
                                                Dialog.show("Marker Clicked!", "welcome to "+R.getAddress_randonnee(), "OK", null);
                                            }
                                        });
                                    } catch (IOException err) {
                                        // since the image is iin the jar this is unlikely
                                        err.printStackTrace();
                                    }

                                    // local.addComponent(BorderLayout.CENTER, cnt);
                                    final Label lbl = new Label("Localization: ... " + R.getAddress_randonnee());
                                    cnt.addMapListener(new MapListener() {
                                        public void mapPositionUpdated(Component source, int zoom, Coord center) {
                                            lbl.setText("Localization: " + center.getLatitude() + ", " + center.getLongitude());
                                            lbl.setText("lalt: " + cnt.getCoordAtPosition(0, 0).getLatitude() + " / lon " + cnt.getCoordAtPosition(Display.getInstance().getDisplayWidth(), 0).getLongitude());
                                        }
                                    });

                                    cnt.addTapListener(new ActionListener() {

                                        @Override
                                        public void actionPerformed(ActionEvent evt) {

                                        }

                                    });

                                    cnt.addLongPressListener(new ActionListener() {

                                        public void actionPerformed(ActionEvent evt) {
                                            Dialog.show("Long Tap", "Long tap detected", "OK", null);
                                        }
                                    });
                                    local.addComponent(BorderLayout.SOUTH, lbl);
                                    local.addComponent(BorderLayout.CENTER, cnt);
                                    Resources r = null;
                                    try {
                                        r = Resources.open("/theme.res");
                                    } catch (IOException ex) {
                                    }
//                                    Image imBa2 = r.getImage("back-command.png");
//                                    Command cmdBack2 = new Command("Back", imBa2);
                                    
                                    local.getToolbar().addCommandToOverflowMenu(cm6);
                                    
                                    local.addCommandListener(new ActionListener() {
                                        @Override
                                        public void actionPerformed(ActionEvent evt) {
                                            if (evt.getCommand()==cm6) {
                                                  F3.show();
                                            }
                                          

                                        }
                                    });

                                    local.show();

                                }
                            });
                        }

                        F5.show();
                    }

                };
                connectionRequest.setUrl("http://localhost/select.php");
                NetworkManager.getInstance().addToQueue(connectionRequest);

            }

        });
        
        Button B2 =new Button();
         B2 = (Button) UIB.findByName("B2", F6);
        
//        B2.requestFocus();
        B2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                
                  ConnectionRequest req = new ConnectionRequest();
                System.err.println("1");
                Randonnee r = new Randonnee();
                User u = new User();
                
                
                
                
                req.setUrl("http://localhost/insert.php?nom=" + T3.getText() + "&description=" + T4.getText() + "&date_depart=" + T5.getText() + "&address_randonnee=" + T6.getText()  + "&nbr_place=" + T7.getText()+ r.getCreator());
                F2.show();
                
                req.addResponseCodeListener(new ActionListener<NetworkEvent>() {
                      @Override
                      public void actionPerformed(NetworkEvent evt) {
                            }
                  });
                
                NetworkManager.getInstance().addToQueue(req);

            }
          
            
        });
        
        
       // <1>
searchField.getHintLabel().setUIID("Title");
searchField.setUIID("Title");
searchField.getAllStyles().setAlignment(Component.LEFT);
F3.getToolbar().setTitleComponent(searchField);
FontImage searchIcon = FontImage.createMaterial(FontImage.MATERIAL_SEARCH,s);
        
        
        F3.getToolbar().addCommandToRightBar("", searchIcon, (e) -> {
           
            searchField.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent evt) {
                    ConnectionRequest connectionRequest;
                connectionRequest = new ConnectionRequest() {
                    @Override
                    protected void readResponse(InputStream input) throws IOException {
                        Rando1.clear();
                        JSONParser json = new JSONParser();

                        Reader reader = new InputStreamReader(input, "UTF-8");
                        Map<String, Object> data = json.parseJSON(reader);
                        List<Map<String, Object>> content
                                = (List<Map<String, Object>>) data.get("root");
                        
                        for (Map<String, Object> obj : content) {

                            String n = (String) obj.get("nom");
                            String d = (String) obj.get("description");
                            String dd = (String) obj.get("date_depart");
                            String ad = (String) obj.get("address_randonnee");
//                            String lon = (String) obj.get("longitude");
//                            String lat = (String) obj.get("latitude");
                            //String nbr = (String) obj.get("nbr_place");
                            Randonnee r = new Randonnee(n, d, dd, ad, 0);
//                            r.setLatitude(Float.parseFloat(lat));
//                            r.setLongitude(Float.parseFloat(lon));

                            Rando1.add(r);

                        }

                    }

                    @Override
                    protected void postResponse() {
                        F7.removeAll();
                        
                        for (Randonnee R : Rando1) {
                            MultiButton mb = new MultiButton("Nom :"+R.getNom());
                            mb.setTextLine2("Date De Depart :"+R.getDate_depart());
                            mb.setTextLine3("Description :"+R.getDescription());
                            mb.setTextLine4("Destination :"+R.getAddress_randonnee());
                            F7.add(mb);
                           
                        }

                        F7.show();
                    }

                };
                 String zz = new String();
            zz = searchField.getText();
                
                connectionRequest.setUrl("http://localhost/recherche.php?nom="+zz);
                NetworkManager.getInstance().addToQueue(connectionRequest);
                    
                    
                    
                   }
            });
            
        });
 F7.setTitle("Events");
F7.getToolbar().addCommandToLeftBar(cm67);
F7.addCommandListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                if (evt.getCommand()==cm67) {
                    
                    F3.show();
                    
                    
                }
               }
        });
        
        
         
                
       

        F.show();
   }

    public void stop() {
        current = Display.getInstance().getCurrent();
        if (current instanceof Dialog) {
            ((Dialog) current).dispose();
            current = Display.getInstance().getCurrent();
        }
    }

    public void destroy() {
    }

}
